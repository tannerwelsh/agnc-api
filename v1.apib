FORMAT: 1A
HOST: http://localhost:3000/

# AGNC

## API Root [/]

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body.

It is recommend to follow the "url" link values or Link headers to get to resources instead of constructing your own URLs to keep your client decoupled from implementation details.

### List Endpoints [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          "/objects": [
            "GET: /",
            "GET: /:object_id",
            "POST: /",
            "PUT: /:object_id",
            "DELETE: /:object_id"
          ],
          "/types": [
            "GET: /",
            "POST: /",
            "GET: /:type_id",
            "PUT: /:type_id",
            "DELETE: /:type_id"
          ],
          "/agents": [
            "GET: /",
            "POST: /",
            "GET: /:agent_id",
            "PUT: /:agent_id",
            "DELETE: /:agent_id"
          ],
          "/": [
            "GET: /"
          ]
        }

## Group Object

Data objects in the API. An object is the most generic unit of data in the system.

Objects have many attributes, only six of which are consistent across all objects:

- `_id` : 128-bit UUID.
- `type` : References the object's type.
- `sets` : Ids of sets that include the object.
- `owner` : Agent id of object owner.
- `public` : Boolean value for whether the object is publicly visible or private to the owning agent.
- `created_at`: UTC timestamp for when object was first created.
- `updated_at`: UTC timestamp for when object was last updated.

The remaining _required_ attributes of an object are determined by the schema defined in its associated type. Objects may also have any number of arbitrary attributes not specified by its schema.

## Object [/objects/{object_id}]

+ Parameters
    + object_id: `d1ff2c9106a146f190b8a50422804a3a` (uuid, required) - unique id for object

### Show Object [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          "_id":        "d1ff2c9106a146f190b8a50422804a3a",
          "type":       "Quote",
          "sets":       [
            "#literature",
            "#american",
            "#truth",
            "#philosophy"
          ],
          "owner":      "@ada",
          "public":     true,
          "created_at": "Mon, 28 Sep 2015 16:48:56 GMT",
          "updated_at": "Mon, 28 Sep 2015 16:48:56 GMT",
          "content":    "If you tell the truth, you don't have to remember anything.",
          "context":    null,
          "source":     "@mark_twain"
        }

### Update Object [PUT]

+ Request (application/json)

        {
          "sets": [
            "#literature",
            "#american",
            "#truth"
          ]
        }

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Location: /objects/d1ff2c9106a146f190b8a50422804a3a

    + Body

            {
              "ok":  true,
              "id":  "d1ff2c9106a146f190b8a50422804a3a",
              "rev": "2-e7e415b2ab725858774ff650c8e1924e"
            }

### Delete Object [DELETE]

Only the owner or an admin agent may delete an object.

+ Response 204

## Object Queries [/objects{?q,owner,type,set}]

+ Parameters
    + q: `@ada` (string, optional) - filter by query string
    + owner: `@ada` (string, optional) - filter by owner
    + type: `Quote` (string, optional) - filter by type
    + set: `literature` (string, optional) - filter by set

### Search Objects [GET]

The `q` parameter takes a specifically formated query expression for searching objects. The syntax of the query expression informs the API how to search the object database.

Some examples (not URI-escaped for clarity):

- `?q=Bank statement September 2013` = return objects with attribute values that include **all** of the terms `Bank`, `statement`, `September`, and `2013`, sorted by relevance.
- `?q="Bank statement" September 2013` = return objects with attribute values that include the **exact phrase** `Bank statement` and the terms `September` and `2013`
- `?q=Bank statement September 2013 :account *8627` = return objects with attribute values that include **all** of the terms `Bank`, `statement`, `September`, and `2013`, and a value for attribute **account** ending in `8627`, sorted by relevance.
- `?q=Bank statement + September 2013` = return the **union** of the two sub-queries `Bank statement` and `September 2013`
- `?q=Bank statement | September 2013` = return the **intersection** of the two sub-queries `Bank statement` and `September 2013`
- `?q=Bank statement - September 2013` = return the **set difference** of the two sub-queries `Bank statement` and `September 2013`
- `?q=Bank statement + September 2013 | :account *8627` = return the **intersection** of the sub-queries `Bank statement + September 2013` and `:account *8627`

The same set-operation query syntax can be used for the `set` parameter as well, for example:

- `?set=music brazil` or `?set=music | brazil` = return the intersection of the sets `#music` and `#brazil`
- `?set=music + brazil` = return the union of the sets `#music` and `#brazil`
- `?set=music - brazil` = return the set difference of the sets `#music` and `#brazil`
- `?set=music | brazil - samba` = return the set difference of the sets `#music | #brazil` and `#samba`

Follow the `next` link in the headers to retrieve the next page of objects. If there is no `next` link, then it is the last page.

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Link: </objects?query=queryhash&page=2>; rel="next", </objects?query=queryhash&page=4>; rel="last"

    + Body

            [
              {
                "_id":        "d1ff2c9106a146f190b8a50422804a3a",
                "type":       "Quote",
                "sets":       [
                  "#literature",
                  "#american",
                  "#truth",
                  "#philosophy"
                ],
                "owner":      "@ada",
                "public":     true,
                "created_at": "Mon, 28 Sep 2015 16:48:56 GMT",
                "updated_at": "Mon, 28 Sep 2015 16:48:56 GMT",
                "content":    "If you tell the truth, you don't have to remember anything.",
                "context":    null,
                "source":     "@mark_twain"
              }
            ]

## Object Creation [/objects]

Any authenticated agent may create new objects.

### Create Object [POST]

+ Request (application/json)

        {
          "type":      "Book",
          "sets":      [
            "#systems",
            "#theory"
          ],
          "owner":     "@odysseus",
          "title":     "Thinking in Systems",
          "author":    "Donella Meadows",
          "author_id": "faa732ca88c64f55964f4b4c6bde382c"
        }

+ Response 201 (application/json; charset=utf-8)

    + Headers

            Location: /objects/53b72533165045b4bcd3e2333e58c773

    + Body

            {
              "_id":  "53b72533165045b4bcd3e2333e58c773",
              "_rev": "1-fe9546206797e28ef3be11480bc0788c"
            }

## Group Type

The type system is used to define the schema for objects, defining which attributes they are required to have and the data type of those attributes.

Types have the following attributes:

- `_id` : Textual identifier for the type. First letter must be capitalized. Only alphanumeric characters and underscores allowed.
- `owner` : Reference to creating and managing agent for this resource.
- `schema` : Defines object schema for all objects that utilize this type.

## Type Definition [/types/{type_id}]

+ Parameters
    + type_id: `quote` (string, required) - unique name for type

### Show Type [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          "_id":    "Quote",
          "owner":  "@root",
          "schema": {
            "content": "String",
            "context": "ObjectId?",
            "source":  "AgentId"
          }
        }

### Update Type [PUT]

Only the owner of a type may make modifications to the type.

+ Request (application/json)

        {
          "schema": {
            "content":  "String",
            "language": "String?",
            "context":  "ObjectId?",
            "source":   "AgentId"
          }
        }

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Location: /types/Quote

    + Body

            {
              "ok":  true,
              "id":  "Quote",
              "rev": "2-765691fe8d09417b9c12cb377825da34"
            }

### Delete Type [DELETE]

Only admin agents may delete types.

+ Response 204

## Types Collection [/types]

Follow the `next` link in the headers to retrieve the next page of types. If there is no `next` link, then it is the last page.

### List Types [GET]

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Link: </types?page=2>; rel="next", </types?page=5>; rel="last"

    + Body

            [
              {
                "_id":    "Book",
                "owner":  "@root",
                "schema": {
                  "title":     "String",
                  "author":    "String",
                  "author_id": "Id?"
                }
              }
            ]

### Create Type [POST]

+ Request (application/json)

        {
          "_id":    "Movie",
          "owner":  "@root",
          "schema": {
            "title": "String",
            "genre": "String?",
            "director": "ObjectId?",
            "duration": "Number?"
          }
        }

+ Response 201 (application/json; charset=utf-8)

    + Headers

            Location: /types/Movie

    + Body

            {
              "_id":  "Movie",
              "_rev": "1-cb3d317200ab9ac092461728fa5f474f"
            }

## Group Set

Sets represent groupings of objects.

## Sets Collection [/sets]

### List Sets [GET]

Follow the `next` link in the headers to retrieve the next page of sets. If there is no `next` link, then it is the last page.

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Link: </sets?page=2>; rel="next", </sets?page=91>; rel="last"

    + Body

            [
              {
                "name": "#literature",
                "size": 82
              }
            ]

## Group Agent

Agents represent units with agency in the system, i.e. users, admins, creators, moderators, etc.

Agents have the following attributes:

- `_id` : Textual identifier for the agent. Must start with a `@` character. Only alphanumeric characters and underscores allowed.
- `name` : Agent's full name.
- `email` : Agent's email address.
- `password` : Encrypted password.

## Agent Profile [/agents/{agent_id}]

+ Parameters
    + agent_id: `ada` (string, required) - unique agent id

### Show Agent [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          "_id":        "@ada",
          "name":       "Ada Lovelace",
          "email":      "ada@lovelace.com",
          "password":   "7298fa15f3f94bb88429f45b4c3e0e61",
          "created_at": "Mon, 28 Sep 2015 16:48:56 GMT",
          "updated_at": "Mon, 28 Sep 2015 16:48:56 GMT"
        }

### Update Agent [PUT]

+ Request (application/json)

        {
          "name": "Augusta Ada King"
        }

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Location: /agents/@ada

    + Body
            {
              "ok":  true,
              "id":  "@ada",
              "rev": "2-7810e803a7c45b8b26d7dfde169c60b1"
            }

### Delete Agent [DELETE]

Only admin agents may delete agents permanently. For regular agents, deleting is equivalent to disabling their account.

+ Response 204

## Agents Collection [/agents]

### List Agents [GET]

Follow the `next` link in the headers to retrieve the next page of agents. If there is no `next` link, then it is the last page.

+ Response 200 (application/json; charset=utf-8)

    + Headers

            Link: </agents?page=2>; rel="next", </agents?page=10>; rel="last"

    + Body

            [
              {
                "_id":        "@ada",
                "name":       "Ada Lovelace",
                "email":      "ada@lovelace.com",
                "password":   "7298fa15f3f94bb88429f45b4c3e0e61",
                "created_at": "Mon, 28 Sep 2015 16:48:56 GMT",
                "updated_at": "Mon, 28 Sep 2015 16:48:56 GMT"
              }
            ]

### Create Agent [POST]

+ Request (application/json)

        {
          "_id":      "@ada",
          "name":     "Ada Lovelace",
          "email":    "ada@lovelace.com",
          "password": "byronbaby"
        }

+ Response 201 (application/json; charset=utf-8)

    + Headers

            Location: /agents/@ada

    + Body

            {
              "_id":  "@ada",
              "_rev": "1-56937d34aea865ee9a5353f2e7133cbe"
            }
